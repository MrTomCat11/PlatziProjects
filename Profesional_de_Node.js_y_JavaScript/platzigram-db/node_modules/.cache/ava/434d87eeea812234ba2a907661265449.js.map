{"version":3,"sources":["db-test.js"],"names":["test","require","uuid","r","Db","fixtures","dbName","v4","db","before","t","connect","true","connected","after","disconnect","false","always","conn","dbDrop","run","is","saveImage","image","getImage","created","description","url","likes","liked","deepEqual","tags","user_id","id","public_id","encode","truthy","createdAt"],"mappings":"AAAA;;;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,OAAOD,QAAQ,aAAR,CAAb;AACA,MAAME,IAAIF,QAAQ,WAAR,CAAV;AACA,MAAMG,KAAKH,QAAQ,KAAR,CAAX;AACA,MAAMI,WAAWJ,QAAQ,YAAR,CAAjB;;AAEA,MAAMK,SAAU,cAAaJ,KAAKK,EAAL,EAAU,EAAvC;AACA,MAAMC,KAAK,IAAIJ,EAAJ,CAAO,EAAEI,IAAIF,MAAN,EAAP,CAAX;;AAEAN,KAAKS,MAAL,CAAY,gBAAZ;AAAA,+BAA8B,WAAMC,CAAN,EAAW;AAAA;;AACvC,UAAMF,GAAGG,OAAH,EAAN;AACAD,MAAEE,IAAF,uBAAO,qCAAGC,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAqB,qBAArB;AACD,GAHD;;AAAA;AAAA;AAAA;AAAA;;AAKAb,KAAKc,KAAL,CAAW,qBAAX;AAAA,gCAAkC,WAAMJ,CAAN,EAAW;AAAA;;AAC3C,UAAMF,GAAGO,UAAH,EAAN;AACAL,MAAEM,KAAF,yBAAQ,sCAAGH,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAsB,wBAAtB;AACD,GAHD;;AAAA;AAAA;AAAA;AAAA;;AAKAb,KAAKc,KAAL,CAAWG,MAAX,CAAkB,kBAAlB;AAAA,gCAAsC,WAAMP,CAAN,EAAW;AAC/C,QAAIQ,OAAO,MAAMf,EAAEQ,OAAF,CAAU,EAAV,CAAjB;AACA,UAAMR,EAAEgB,MAAF,CAASb,MAAT,EAAiBc,GAAjB,CAAqBF,IAArB,CAAN;AACD,GAHD;;AAAA;AAAA;AAAA;AAAA;;AAKAlB,KAAK,YAAL;AAAA,gCAAmB,WAAMU,CAAN,EAAW;AAAA;;AAC5BA,MAAEW,EAAF,CAAK,OAAOb,GAAGc,SAAf,EAA0B,UAA1B,EAAsC,uBAAtC;;AAEA,QAAIC,QAAQlB,SAASmB,QAAT,EAAZ;;AAEA,QAAIC,UAAU,MAAMjB,GAAGc,SAAH,CAAaC,KAAb,CAApB;AACAb,MAAEW,EAAF,CAAKI,QAAQC,WAAb,EAA0BH,MAAMG,WAAhC;AACAhB,MAAEW,EAAF,CAAKI,QAAQE,GAAb,EAAkBJ,MAAMI,GAAxB;AACAjB,MAAEW,EAAF,CAAKI,QAAQG,KAAb,EAAoBL,MAAMK,KAA1B;AACAlB,MAAEW,EAAF,CAAKI,QAAQI,KAAb,EAAoBN,MAAMM,KAA1B;AACAnB,MAAEoB,SAAF,CAAYL,QAAQM,IAApB,EAA0B,CAAE,SAAF,EAAa,MAAb,EAAqB,QAArB,CAA1B;AACArB,MAAEW,EAAF,CAAKI,QAAQO,OAAb,EAAsBT,MAAMS,OAA5B;AACAtB,MAAEW,EAAF,CAAK,OAAOI,QAAQQ,EAApB,EAAwB,QAAxB;AACAvB,MAAEW,EAAF,CAAKI,QAAQS,SAAb,EAAwBhC,KAAKiC,MAAL,CAAYV,QAAQQ,EAApB,CAAxB;AACAvB,MAAE0B,MAAF,yBAAS,2CAAQC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GAfD;;AAAA;AAAA;AAAA;AAAA","file":"db-test.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst uuid = require('uuid-base62')\nconst r = require('rethinkdb')\nconst Db = require('../')\nconst fixtures = require('./fixtures')\n\nconst dbName = `platzigram_${uuid.v4()}`\nconst db = new Db({ db: dbName })\n\ntest.before('setup database', async t => {\n  await db.connect()\n  t.true(db.connected, 'should be connected')\n})\n\ntest.after('disconnect database', async t => {\n  await db.disconnect()\n  t.false(db.connected, 'should be disconnected')\n})\n\ntest.after.always('cleanup database', async t => {\n  let conn = await r.connect({})\n  await r.dbDrop(dbName).run(conn)\n})\n\ntest('save image', async t => {\n  t.is(typeof db.saveImage, 'function', 'saveImage is function')\n\n  let image = fixtures.getImage()\n\n  let created = await db.saveImage(image)\n  t.is(created.description, image.description)\n  t.is(created.url, image.url)\n  t.is(created.likes, image.likes)\n  t.is(created.liked, image.liked)\n  t.deepEqual(created.tags, [ 'awesome', 'tags', 'platzi' ])\n  t.is(created.user_id, image.user_id)\n  t.is(typeof created.id, 'string')\n  t.is(created.public_id, uuid.encode(created.id))\n  t.truthy(created.createdAt)\n})\n"]}